namespace Zadanie_5
{
    internal class Program
    {
        //отображения таблицы
        static void DisplayTable(char[,] table)
        {
            for (int row = 0; row < table.GetLength(0); row++)
            {
                for (int col = 0; col < table.GetLength(1); col++)
                {
                    if (table[row, col] == 'B')
                    {
                        Console.ForegroundColor = ConsoleColor.Red; // Отображение символа B красным цветом
                        Console.Write(table[row, col]);
                        Console.ResetColor(); // Сброс цвета
                    }
                    else
                    {
                        Console.Write(table[row, col]); // Отображение остальных символов
                    }
                }
                Console.WriteLine(); // Переход к новой строке
            }
        }

        // Рекурсивный метод заливки
        static void FillRegion(int x, int y, ref char[,] table, ref int recursionCount, char borderSymbol = 'B', char fillSymbol = 'X')
        {
            char currentChar = table[y - 1, x - 1]; // Получение текущего символа
            recursionCount++;

            Console.WriteLine($"\nРекурсивный вызов {recursionCount}: [x = {x}, y = {y}]");

            if (currentChar != borderSymbol && currentChar != fillSymbol)
            {
                table[y - 1, x - 1] = fillSymbol; // Заполнение текущей ячейки
                DisplayTable(table); // Отображение таблицы после изменения

                // Рекурсивные вызовы для соседних ячеек Для задания А
                //FillRegion(x - 1, y, ref table, ref recursionCount, borderSymbol, fillSymbol);
                //FillRegion(x, y + 1, ref table, ref recursionCount, borderSymbol, fillSymbol);
                //FillRegion(x + 1, y, ref table, ref recursionCount, borderSymbol, fillSymbol);
                //FillRegion(x, y - 1, ref table, ref recursionCount, borderSymbol, fillSymbol);
                // Рекурсивные вызовы для соседних ячеек Для задания В
                FillRegion(x, y + 1, ref table, ref recursionCount, borderSymbol, fillSymbol);
                FillRegion(x + 1, y, ref table, ref recursionCount, borderSymbol, fillSymbol);
                FillRegion(x, y - 1, ref table, ref recursionCount, borderSymbol, fillSymbol);
                FillRegion(x - 1, y, ref table, ref recursionCount, borderSymbol, fillSymbol);
            }
        }

        static void Main(string[] args)
        {
            // Исходная таблица для А
            //char[,] table = {
            ////      1    2    3    4    5    6    7    8    9    10   11   12  13   14   15   16    17
            ///*1 */{' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},/*1 */
            ///*2 */{ ' ', ' ', ' ', ' ', ' ', 'B', 'B', 'B', ' ', 'B', 'B', 'B', ' ', ' ', ' ', ' ', ' '},/*2 */
            ///*3 */{ ' ', ' ', ' ', ' ', 'B', ' ', ' ', 'B', 'B', 'B', ' ', ' ', 'B', ' ', ' ', ' ', ' '},/*3 */
            ///*4 */{ ' ', ' ', ' ', 'B', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'B', ' ', ' ', ' '},/*4 */            
            ///*5 */{ ' ', ' ', 'B', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'B', ' ', ' '},/*5 */
            ///*6 */{ ' ', 'B', ' ', ' ', ' ', ' ', ' ', 'B', 'B', 'B', ' ', ' ', ' ', ' ', ' ', 'B', ' '},/*6 */            
            ///*7 */{ ' ', 'B', ' ', ' ', ' ', ' ', 'B', ' ', ' ', ' ', 'B', ' ', ' ', ' ', ' ', 'B', ' '},/*7 */
            ///*8 */{ ' ', 'B', ' ', ' ', ' ', ' ', 'B', ' ', ' ', ' ', 'B', ' ', ' ', ' ', ' ', 'B', ' '},/*8 */            
            ///*9 */{ ' ', 'B', ' ', ' ', ' ', ' ', 'B', ' ', ' ', ' ', 'B', ' ', ' ', ' ', ' ', 'B', ' '},/*9 */
            ///*10*/{ ' ', 'B', ' ', ' ', ' ', ' ', 'B', ' ', ' ', ' ', 'B', ' ', ' ', ' ', ' ', 'B', ' '},/*10*/            
            ///*11*/{ ' ', 'B', ' ', ' ', ' ', ' ', 'B', ' ', ' ', ' ', 'B', ' ', ' ', ' ', ' ', 'B', ' '},/*11*/
            ///*12*/{ ' ', 'B', ' ', ' ', ' ', ' ', ' ', 'B', 'B', 'B', ' ', ' ', ' ', ' ', ' ', 'B', ' '},/*12*/            
            ///*13*/{ ' ', 'B', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'B', ' '},/*13*/
            ///*14*/{ ' ', 'B', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'B', ' '},/*14*/            
            ///*15*/{ ' ', 'B', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'B', ' '},/*15*/
            ///*16*/{ ' ', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', ' '},/*16*/            
            ///*17*/{ ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},/*17*/
            ////      1    2    3    4    5    6    7    8    9    10   11   12  13   14   15   16    17
            //}; 

            // Исходная таблица для В
            char[,] table = {
            //      1    2    3    4    5    6    7    8    9    10   11   12  13   14   15   16    17
            /*1 */{' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},/*1 */
            /*2 */{ ' ', ' ', ' ', ' ', ' ', 'B', 'B', 'B', ' ', 'B', 'B', 'B', ' ', ' ', ' ', ' ', ' '},/*2 */
            /*3 */{ ' ', ' ', ' ', ' ', 'B', ' ', ' ', 'B', 'B', 'B', ' ', ' ', 'B', ' ', ' ', ' ', ' '},/*3 */
            /*4 */{ ' ', ' ', ' ', 'B', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'B', ' ', ' ', ' '},/*4 */            
            /*5 */{ ' ', ' ', 'B', ' ', 'B', 'B', 'B', 'B', ' ', ' ', ' ', ' ', ' ', ' ', 'B', ' ', ' '},/*5 */
            /*6 */{ ' ', 'B', ' ', 'B', ' ', ' ', ' ', 'B', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'B', ' '},/*6 */            
            /*7 */{ ' ', 'B', ' ', 'B', ' ', ' ', ' ', 'B', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'B', ' '},/*7 */
            /*8 */{ ' ', 'B', ' ', 'B', ' ', ' ', ' ', 'B', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'B', ' '},/*8 */            
            /*9 */{ ' ', 'B', ' ', 'B', ' ', ' ', ' ', 'B', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'B', ' '},/*9 */
            /*10*/{ ' ', 'B', ' ', 'B', ' ', ' ', ' ', 'B', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'B', ' '},/*10*/            
            /*11*/{ ' ', 'B', ' ', 'B', ' ', ' ', ' ', 'B', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'B', ' '},/*13*/
            /*12*/{ ' ', 'B', ' ', ' ', 'B', 'B', 'B', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'B', ' '},/*14*/            
            /*13*/{ ' ', 'B', 'B', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'B', ' '},/*15*/
            /*14*/{ ' ', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', ' '},/*16*/                   
            /*15*/{ ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},/*17*/
            /*16*/{ ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},/*17*/
            /*17*/{ ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},/*17*/
            //      1    2    3    4    5    6    7    8    9    10   11   12  13   14   15   16    17
            };



            int recursionCount = 0; // Счётчик рекурсивных вызовов
            FillRegion(3, 6, ref table, ref recursionCount); // Запуск заливки
        }
    }
}